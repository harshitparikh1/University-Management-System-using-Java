/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HeadChefRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.HeadChef.HeadChef;
import Business.HeadChef.HeadChefDirectory;
import Business.Menu.Ingredients;
import Business.Menu.Menu;
import Business.Menu.MenuDirectory;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONObject;
import userinterface.SystemAdminWorkArea.ModifyCustomerJPanel;
import userinterface.HeadChefRole.IngredientWorkAreaJPanel;

/**
 *
 * @author talre
 */
public class ManageMenuIngredientsJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer; 
    private UserAccount account;
    private EcoSystem ecoSystem; 
    private MenuDirectory menuDirectory;
    private HeadChefDirectory headChefDirectory;
   
    

    /**
     * Creates new form ManageMenuIngredientsJPanel
     */

    public ManageMenuIngredientsJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem ecoSystem, MenuDirectory menuDirectory, HeadChefDirectory headChefDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        this.account = account;
        this.menuDirectory = ecoSystem.getMenuDirectory();
        this.headChefDirectory = ecoSystem.getHeadChefDirectory();
        
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        viewIngredients = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableIngredient = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        txtIngredient = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblMenu.setBackground(new java.awt.Color(204, 204, 204));
        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Item Name", "Number of Ingredients"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMenu);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, 100));

        viewIngredients.setBackground(new java.awt.Color(255, 255, 255));
        viewIngredients.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        viewIngredients.setText("View Ingredients");
        viewIngredients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewIngredientsActionPerformed(evt);
            }
        });
        add(viewIngredients, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 200, 60));

        jLabel1.setFont(new java.awt.Font("Optima", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Menu Ingredients Panel");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-100, 60, 1200, -1));

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        tableIngredient.setBackground(new java.awt.Color(204, 204, 204));
        tableIngredient.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tableIngredient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ingredient", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableIngredient);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 130, 320, 170));

        btnCreate.setBackground(new java.awt.Color(255, 255, 255));
        btnCreate.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        btnCreate.setText("Add Ingredient");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 459, 160, 40));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        btnDelete.setText("Delete Ingredient");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(785, 459, 170, 40));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 102, -1, 180));
        add(txtIngredient, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 340, 150, -1));
        add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 400, 150, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Quantity Required");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 410, 150, -1));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setText("Ingredient");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 350, 80, -1));

        refreshJButton.setBackground(new java.awt.Color(204, 255, 204));
        refreshJButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(851, 9, 100, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Ingredients.jpg"))); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 320, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewIngredientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewIngredientsActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblMenu.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please Select a row from table first", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Menu menu = (Menu)tblMenu.getValueAt(selectedRow,0);
        
        DefaultTableModel dtm = (DefaultTableModel) tableIngredient.getModel();
        dtm.setRowCount(0);
        for(Ingredients ing : menu.getIngredients()){
         
        
        Object [] row = new Object[2];
            row[0] = ing.getName();
            row[1] = ing.getQuantity();
            dtm.addRow(row);
        }
        
        
        
       
        
    }//GEN-LAST:event_viewIngredientsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        int selectedRow = tblMenu.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please Select a row from table first", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        } 
        Menu menu = (Menu)tblMenu.getValueAt(selectedRow,0);
        Ingredients ing1 = new Ingredients(txtIngredient.getText(),Integer.parseInt(txtQuantity.getText()));
        menu.getIngredients().add(ing1);
        for(Restaurant restaurant : ecoSystem.getRestaurantDirectory().getRestaurantDirectory()){
            if(restaurant.getRestaurantName().equals(menu.getRestaurantName())){
                if(txtIngredient.getText().isEmpty() || txtQuantity.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Fields cannot be left empty");
                    return;
                }
                else{
                    
                    int qty = 0;
                    try {
                        qty = Integer.parseInt(txtQuantity.getText());
                    } catch(Exception e) {
                        JOptionPane.showMessageDialog(null, "Quantity must have numbers only");
                        return;
                    }

                    restaurant.getInventory().put(txtIngredient.getText(), 100);
                    JOptionPane.showMessageDialog(null, "Successfully added a ingredient");
                    populateTable();
                }
                
                
            }
        }
        
        DefaultTableModel dtm = (DefaultTableModel) tableIngredient.getModel();
        dtm.setRowCount(0);
        for(Ingredients ing : menu.getIngredients()){
         
        
        Object [] row = new Object[2];
            row[0] = ing.getName();
            row[1] = ing.getQuantity();
            dtm.addRow(row);
        }
        
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tableIngredient.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please Select a row from table first", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Menu menu = (Menu)tblMenu.getValueAt(selectedRow,0);
        for(Ingredients ing : menu.getIngredients()){
            if(ing.getName().equals(tableIngredient.getValueAt(selectedRow,0))){
                menu.getIngredients().remove(ing);
                populateTable();
            }
        }
        
        
        
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tableIngredient;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtIngredient;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JButton viewIngredients;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblMenu.getModel();
        dtm.setRowCount(0);
        String restaurantName = "";
        for(HeadChef headChef : ecoSystem.getHeadChefDirectory().getHeadChefDirectory()){
            if(headChef.getName().equals(account.getEmployee().getName())){
                restaurantName = headChef.getRestaurantName();
                
            }
        }
        for(Menu menu: menuDirectory.getMenuDirectory()){
            if(menu.getRestaurantName().equals(restaurantName)){
            Object [] row = new Object[2];
            row[0] = menu;
            row[1] = menu.getIngredients().size();
            dtm.addRow(row);
            }

        }
    }
}
